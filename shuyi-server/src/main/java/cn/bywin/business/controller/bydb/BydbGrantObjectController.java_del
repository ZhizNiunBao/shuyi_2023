package cn.bywin.business.controller.bydb;


import cn.bywin.business.bean.bydb.TTruApplyObjectDo;
import cn.bywin.business.bean.bydb.TBydbDatasetDo;
import cn.bywin.business.bean.bydb.TTruGrantObjectDo;
import cn.bywin.business.bean.bydb.TBydbObjectDo;
import cn.bywin.business.bean.view.bydb.BydbUserGrantObjVo;
import cn.bywin.business.common.base.BaseController;
import cn.bywin.business.common.base.ResponeMap;
import cn.bywin.business.common.base.UserDo;
import cn.bywin.business.common.login.LoginUtil;
import cn.bywin.business.common.util.ComUtil;
import cn.bywin.business.common.util.HttpRequestUtil;
import cn.bywin.business.common.util.MyBeanUtils;
import cn.bywin.business.common.util.PageBeanWrapper;
import cn.bywin.business.service.bydb.BydbDatabaseService;
import cn.bywin.business.service.bydb.BydbDatasetService;
import cn.bywin.business.service.bydb.BydbFieldService;
import cn.bywin.business.service.bydb.TruGrantObjectService;
import cn.bywin.business.service.bydb.BydbObjectService;
import cn.bywin.business.service.bydb.BydbSchemaService;
import cn.bywin.business.trumodel.ApiTruModelService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


@CrossOrigin(value = {"*"},
        methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.DELETE},
        maxAge = 3600)
@RestController
@Api(tags = "可信建模-授权管理-trugrantobject")
@RequestMapping("/trugrantobject")
public class BydbGrantObjectController extends BaseController {
    protected final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BydbDatabaseService databaseService;

    @Autowired
    private BydbSchemaService shcmeaService;

    @Autowired
    private BydbObjectService objectService;

    @Autowired
    private BydbFieldService fieldService;

    @Autowired
    private BydbDatasetService datasetService;

    //@Autowired
    //private BydbFavouriteObjectService favouriteObjectService;

    @Autowired
    private TruGrantObjectService grantObjectService;

    @Autowired
    private ApiTruModelService apiTruModelService;

//    @Autowired
//    private BydbDcServerService dcserverService;


    @ApiOperation(value = "新增授权对象", notes = "新增授权对象")
    @ApiImplicitParams({
            //@ApiImplicitParam(name = "info", value = "授权对象", dataType = "TBydbFieldDo", required = true, paramType = "body")
    })
    @RequestMapping(value = "/add", method = {RequestMethod.POST})
    @ResponseBody
    public Object add(@RequestBody BydbUserGrantObjVo bean, HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            UserDo ud = LoginUtil.getUser(request);
            if (ud == null || StringUtils.isBlank(ud.getUserId())) {
                return resMap.setErr("请先登录").getResultMap();
            }
            if ( bean == null ||bean.getObjIdList() == null || bean.getObjIdList().size()==0 ) {
                return resMap.setErr("内容不能为空").getResultMap();
            }

            Date now = new Date();

            List<TTruGrantObjectDo> foList = new ArrayList<>();
            List<String> objIdList = new ArrayList<>();
            List<String> dsIdList = new ArrayList<>();

            for (String tmp : bean.getObjIdList()) {
                TTruGrantObjectDo goDo = new TTruGrantObjectDo();
                goDo.setToAccount(bean.getToAccount() );
                goDo.setFromAccount( ud.getUserName() );
                goDo.setRelId(tmp);
                goDo.setGrantTime( now );
                goDo.setId( ComUtil.genId() );
                LoginUtil.setBeanInsertUserInfo( goDo, ud );

                String relId = goDo.getRelId();
                if( StringUtils.isBlank( relId ) ) {
                    return resMap.setErr("授权对象id不能为空").getResultMap();
                }
                else if( relId.startsWith("db")){
                    goDo.setObjectId( relId.substring(2));
                    goDo.setStype("db");
                    if( objIdList.contains( goDo.getObjectId() )){
                        return resMap.setErr("授权对象id不能重复").getResultMap();
                    }
                    objIdList.add( goDo.getObjectId() );
                    TBydbObjectDo objectDo = objectService.findById(goDo.getObjectId());
                    if( objectDo == null){
                        return resMap.setErr("授权对象表不存在").getResultMap();
                    }
//                    goDo.setUserId( objectDo.getUserId() );
//                    goDo.setUserAccount( objectDo.getUserAccount() );
//                    goDo.setUserName( objectDo.getUserName() );
                    goDo.setDbId( objectDo.getDbId() );
                    goDo.setSchemaId( objectDo.getSchemaId() );
                    goDo.setObjName( objectDo.getObjectName());
                    goDo.setObjFullName( objectDo.getObjFullName() );
                    goDo.setObjChnName( objectDo.getObjChnName());

                }else if( relId.startsWith("ds")){
                    goDo.setDatasetId( relId.substring(2));
                    goDo.setStype("ds");
                    if( dsIdList.contains( goDo.getDatasetId() )){
                        return resMap.setErr("授权对象id不能重复").getResultMap();
                    }
                    dsIdList.add( goDo.getDatasetId() );
                    TBydbDatasetDo datasetDo = datasetService.findById(goDo.getDatasetId());
                    if( datasetDo == null){
                        return resMap.setErr("授权数据集不存在").getResultMap();
                    }
//                    goDo.setDcId( datasetDo.getDcId() );
                    goDo.setObjName( datasetDo.getSetCode());
                    goDo.setObjFullName( datasetDo.getViewName() );
                    goDo.setObjChnName( datasetDo.getSetChnName());
                }
                foList.add( goDo );
            }
//            Example exp = new Example(TBydbObjectDo.class);
//            Example.Criteria criteria = exp.createCriteria();
//            criteria.andIn("id", objIdList);
//            List<TBydbObjectDo> list = objectService.findByExample(exp);
//
//            if ( list.size() != objIdList.size() ) {
//                return resMap.setErr("没有数据可删除").getResultMap();
//            }
//            if (list.size() != ids.size()) {
//                return resMap.setErr("有数据不存在").getResultMap();
//            }
            grantObjectService.batchAdd( foList );

//            Map<String, Object> retMap = apiTruModelService.synModel( modelInfo, userDo.getTokenId() );
//            if ( retMap.containsKey( "success" ) && (boolean) retMap.get( "success" ) ) {
//                modelInfo.setSynFlag( 1 );
//                truModelService.updateBean( modelInfo );
//            }
//            else {
//                String msg = String.format( "保存失败" );
//                if ( retMap.containsKey( "msg" ) ) {
//                    msg = String.format( "%s,错误信息：%s", msg, retMap.get( "msg" ) );
//                }
//                truModelService.deleteById( modelInfo.getId() );
//                return result.setErr( msg ).getResultMap();
//            }

//            String times =""+System.currentTimeMillis();
//            for (TTruGrantObjectDo info : foList) {
//                try {
//                    new LogActionOp(SysParamSetOp.readValue(Constants.syspara_SystemCode, ""), HttpRequestUtil.getAllIp(request)).addLog(ud, info, "新增-授权对象" + times);
//                } catch (Exception e1) {
//                    resMap.setErr("新增授权对象失败");
//                    logger.error("新增授权对象异常:", e1);
//                }
//            }

            resMap.setOk( "保存成功");

        } catch (Exception ex) {
            resMap.setErr("保存失败");
            logger.error("保存异常:", ex);
        }
        return resMap.getResultMap();
    }



    /*@ApiOperation(value = "修改授权对象", notes = "修改授权对象")
    @ApiImplicitParams({
            //@ApiImplicitParam(name = "modelVo", value = "授权对象", dataType = "TBydbFieldDo", required = true, paramType = "body")
    })
    @RequestMapping(value = "/update", method = {RequestMethod.POST})
    @ResponseBody
    public Object update(@RequestBody TBydbFieldDo bean, HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            UserDo ud = LoginUtil.getUser(request);
            if (ud == null || StringUtils.isBlank(ud.getUserId())) {
                return resMap.setErr("请先登录").getResultMap();
            }

            TBydbFieldDo info = fieldService.findById(bean.getId());

            if (info == null) {
                return resMap.setErr("内容不存在").getResultMap();
            }

            TBydbFieldDo oldData = new TBydbFieldDo();
            MyBeanUtils.copyBeanNotNull2Bean(info, oldData);

            MyBeanUtils.copyBeanNotNull2Bean(bean, info);

            //new PageBeanWrapper(info, hru, "");

            info.setFieldName(oldData.getFieldName());

            if (StringUtils.isBlank(info.getFieldName())) {
                return resMap.setErr("名称不能为空").getResultMap();
            }

            if (StringUtils.isBlank(info.getFieldType())) {
                return resMap.setErr("类型不能为空").getResultMap();
            }

            if (StringUtils.isBlank(info.getObjectId())) {
                return resMap.setErr("对象不能为空").getResultMap();
            }

            TBydbObjectDo objectDo = objectService.findById(info.getObjectId());
            if (objectDo == null) {
                return resMap.setErr("对象不存在").getResultMap();
            }
            info.setSchemaId(objectDo.getSchemaId());
            info.setDbId(objectDo.getDbId());

            info.setReplaceStatement( chgStateField( info.getChgStatement() , info.getFieldName() ));

//            final long sameNameCount = fieldService.findSameNameCount( info );
//            if( sameNameCount >0 ){
//                return resMap.setErr("名称已使用").getResultMap();
//            }

            fieldService.updateBean(info);

            resMap.setSingleOk(info, "保存成功");

        } catch (Exception ex) {
            resMap.setErr("保存失败");
            logger.error("保存异常:", ex);
        }
        return resMap.getResultMap();
    }
    @ApiOperation(value = "授权对象内容", notes = "授权对象内容")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "语句元素id", dataType = "String", required = true, paramType = "query")
    })
    @RequestMapping(value = "/info", method = {RequestMethod.GET})
    @ResponseBody
    public Object info(String id) {
        ResponeMap resMap = this.genResponeMap();
        try {
            if (StringUtils.isBlank(id)) {
                return resMap.setErr("id不能为空").getResultMap();
            }
            TBydbFieldDo modelVo = fieldService.findById(id);
            resMap.setSingleOk(modelVo, "成功");

        } catch (Exception ex) {
            resMap.setErr("查询失败");
            logger.error("查询异常:", ex);
        }
        return resMap.getResultMap();
    }
     */

    @ApiOperation(value = "删除授权对象", notes = "删除授权对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "授权对象 id", dataType = "String", required = true, paramType = "query")
    })
    @RequestMapping(value = "/delete", method = {RequestMethod.DELETE})
    @ResponseBody
    public Object delete(String id, HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            if (StringUtils.isBlank(id)) {
                return resMap.setErr("id不能为空").getResultMap();
            }
            UserDo user = LoginUtil.getUser(request);
//            if( !id.matches("^[a-zA-Z0-9\\-_,]*$") ){
//                return resMap.setErr("id有非法字符").getResultMap();
//            }
            List<String> ids = Arrays.asList(id.split(",|\\s+"));
            Example exp = new Example(TTruGrantObjectDo.class);
            Example.Criteria criteria = exp.createCriteria();
            criteria.andIn("id", ids);
            List<TTruGrantObjectDo> list = grantObjectService.findByExample(exp);
            int cnt = list.size();
            if (cnt == 0) {
                return resMap.setErr("没有数据可删除").getResultMap();
            }
            if (list.size() != ids.size()) {
                return resMap.setErr("有数据不存在").getResultMap();
            }

            grantObjectService.deleteByIds(ids);

//            String times = String.valueOf(System.currentTimeMillis());
//            for (TTruGrantObjectDo info : list) {
//                try {
//                    new LogActionOp(SysParamSetOp.readValue(Constants.syspara_SystemCode, ""), HttpRequestUtil.getAllIp(request)).delLog(user, info, "删除-授权对象" + times);
//                } catch (Exception e1) {
//                    resMap.setErr("删除失败");
//                    logger.error("删除异常:", e1);
//                }
//            }
            resMap.setOk("删除成功");

        } catch (Exception ex) {
            resMap.setErr("删除失败");
            logger.error("删除异常:", ex);
        }
        return resMap.getResultMap();
    }

    @ApiOperation(value = "获取授权对象列表", notes = "获取授权对象列表")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "qryCond", value = "模糊条件", dataType = "String", required = false, paramType = "query"),
            @ApiImplicitParam(name = "currentPage", value = "页数", dataType = "Integer", required = false, paramType = "query"),
            @ApiImplicitParam(name = "pageSize", value = "分页大小", dataType = "Integer", required = false, paramType = "query")
    })
    @RequestMapping(value = "/page", method = {RequestMethod.GET})
    @ResponseBody
    public Object page(HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            TTruGrantObjectDo modelVo = new TTruGrantObjectDo();
            HttpRequestUtil hru = HttpRequestUtil.parseHttpRequest( request );
            new PageBeanWrapper( modelVo,hru);
            modelVo.setQryCond(ComUtil.chgLikeStr(modelVo.getQryCond()));

            UserDo user = LoginUtil.getUser(request);

            if( StringUtils.isBlank( modelVo.getToAccount() )){
                modelVo.setToAccount( user.getUserName() );
            }

            long findCnt = grantObjectService.findBeanCnt(modelVo);
            modelVo.genPage(findCnt);

            List<TTruGrantObjectDo> list = grantObjectService.findBeanList(modelVo);

            //Map<String, TBydbDcServerDo> dcMap = dcserverService.findBaseList(null).stream().collect(Collectors.toMap(x -> x.getId(), x -> x));
            List<Object> retList = new ArrayList<>();
            for (TTruGrantObjectDo grantDo : list) {
                HashMap<String,Object> datMap = new HashMap<>();
                MyBeanUtils.copyBean2Map( datMap, grantDo );
//                TBydbDcServerDo dcdo = dcMap.get(grantDo.getDcId());
//                if( dcdo != null ){
//                    datMap.put("dcName", dcdo.getDcName() );
//                    datMap.put("dcManageName",dcdo.getManageName());
//                }
                retList.add( datMap );
            }
            resMap.setPageInfo(modelVo.getPageSize(), modelVo.getCurrentPage());
            resMap.setOk(findCnt, retList, "获取授权对象列表成功");
        } catch (Exception ex) {
            resMap.setErr("获取授权对象列表失败");
            logger.error("获取授权对象列表失败:", ex);
        }
        return resMap.getResultMap();
    }

    /*@ApiOperation(value = "获取表字段", notes = "获取表字段")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "objectId", value = "表id", dataType = "String", required = true, paramType = "query"),
    })
    @RequestMapping(value = "/option", method = {RequestMethod.GET})
    @ResponseBody
    public Object option(String objectId,HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            TBydbFieldDo modelVo = new TBydbFieldDo();
            HttpRequestUtil hru = HttpRequestUtil.parseHttpRequest( request );
            new PageBeanWrapper( modelVo,hru);
            modelVo.setObjectId( objectId );

            List<TBydbFieldDo> list = fieldService.findBeanList(modelVo);
            resMap.setPageInfo(modelVo.getPageSize(), modelVo.getCurrentPage());
            resMap.setSingleOk(list, "获取表字段");
        } catch (Exception ex) {
            resMap.setErr("获取表字段失败");
            logger.error("获取表字段失败:", ex);
        }
        return resMap.getResultMap();
    }*/

    @ApiOperation(value = "审批对象", notes = "修改授权对象")
    @ApiImplicitParams({
            //@ApiImplicitParam(name = "modelVo", value = "授权对象", dataType = "TBydbFieldDo", required = true, paramType = "body")
    })
    @RequestMapping(value = "/checkapply", method = {RequestMethod.POST})
    @ResponseBody
    public Object update(@RequestBody TTruApplyObjectDo bean, HttpServletRequest request) {
        ResponeMap resMap = this.genResponeMap();
        try {
            UserDo ud = LoginUtil.getUser(request);
            if (ud == null || StringUtils.isBlank(ud.getUserId())) {
                return resMap.setErr("请先登录").getResultMap();
            }

//            TBydbFieldDo info = fieldService.findById(bean.getId());
//
//            if (info == null) {
//                return resMap.setErr("内容不存在").getResultMap();
//            }
//
//            TBydbFieldDo oldData = new TBydbFieldDo();
//            MyBeanUtils.copyBeanNotNull2Bean(info, oldData);
//
//            MyBeanUtils.copyBeanNotNull2Bean(bean, info);
//
//            //new PageBeanWrapper(info, hru, "");
//
//            info.setFieldName(oldData.getFieldName());
//
//            if (StringUtils.isBlank(info.getFieldName())) {
//                return resMap.setErr("名称不能为空").getResultMap();
//            }
//
//            if (StringUtils.isBlank(info.getFieldType())) {
//                return resMap.setErr("类型不能为空").getResultMap();
//            }
//
//            if (StringUtils.isBlank(info.getObjectId())) {
//                return resMap.setErr("对象不能为空").getResultMap();
//            }
//
//            TBydbObjectDo objectDo = objectService.findById(info.getObjectId());
//            if (objectDo == null) {
//                return resMap.setErr("对象不存在").getResultMap();
//            }
//            info.setSchemaId(objectDo.getSchemaId());
//            info.setDbId(objectDo.getDbId());
//
//            info.setReplaceStatement( chgStateField( info.getChgStatement() , info.getFieldName() ));
//
////            final long sameNameCount = fieldService.findSameNameCount( info );
////            if( sameNameCount >0 ){
////                return resMap.setErr("名称已使用").getResultMap();
////            }
//
//            fieldService.updateBean(info);
//
//            resMap.setSingleOk(info, "保存成功");

        } catch (Exception ex) {
            resMap.setErr("保存失败");
            logger.error("保存异常:", ex);
        }
        return resMap.getResultMap();
    }


}
